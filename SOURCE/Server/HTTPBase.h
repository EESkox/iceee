// Thread for the HTTP listening server
//
//

#ifndef HTTPBASE_H
#define HTTPBASE_H

#include "SocketClass3.h"
#include "Components.h"

//DWORD WINAPI HTTPBaseThreadProc(LPVOID lpParam);

class HTTPBaseThread
{
public:
	HTTPBaseThread();
	~HTTPBaseThread();

	char LogBuffer[2048];  //Holds a constructed log message generated by this thread

	unsigned long ThreadID;      //ID of the created thread
	int NextThreadID;

	char RecBuf[64];     //Holds the receiving data, most likely the HTTP GET request for a file.
	char SendBuf[64];    //Holds the data that will be sent back to the client

	bool isExist;         //If true, the thread exists.  If it doesn't, the main program should attempt to reactivate it.
	bool isActive;        //If true, the is active and running.
	int Status;           //This maintains the activity Status, determining whether it needs to Init, Restart, etc.

	int HomePort;
	char HomePortStr[12];     //The port to use for listening
	char BindAddress[128];     //The address to use for listening

	SocketClass sc;       //Controls the socket connection for this thread.

	int InternalIndex;    //A user defined value to identify this instance index in order to assist in diagnostics
	int GlobalThreadID;   //A unique application-defined thread ID for debugging purposes.
	int MessageCountRec;
	int Debug_MaxFullConnections;  //For debug purposes, indicates an error with no available HTTP distribute threads.
	int Debug_KickedFullConnections;  //Full connections are when there are no more available HTTP slots.  Since it should always be waiting, this should never happen.

	void SetHomePort(int port);
	void SetBindAddress(const char *address);
	int InitThread(int instanceindex, int globalThreadID);
	void OnConnect(void);  //Called once a connection has been madevoid HTTPBaseThread :: Shutdown(void)
	void Shutdown(void);   //Force a complete shutdown, thread too
	void ResetValues(bool fullRestart);
	void CheckAutoResponse(void);

	int LaunchDistributeThread(void);

	char * LogMessageL(int logLevel, const char *format, ...);  //Logs a message to the local buffer instead of the main thread
};

extern HTTPBaseThread HTTPBaseServer;

#endif //HTTPBASE_H
